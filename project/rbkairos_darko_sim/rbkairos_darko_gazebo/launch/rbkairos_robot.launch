<?xml version="1.0"?>
<launch>

  <arg name="id_robot" default="robot"/>
  <arg name="prefix" default="$(arg id_robot)_"/>
  <arg name="x_init_pose" default="0"/>
  <arg name="y_init_pose" default="0"/>
  <arg name="z_init_pose" default="0"/>
  <arg name="xacro_robot_package" default="rbkairos_darko_description"/>
  <arg name="xacro_robot" default="rbkairos_panda_plus.urdf.xacro"/>
  <arg name="xacro_robot_path" default="$(eval find(xacro_robot_package) + '/robots/' + xacro_robot)"/>
  <!-- odom, complete (including gps)-->
  <arg name="omni_drive" default="false"/>
  <arg name="ros_planar_move_plugin" default="false"/>
  <arg name="use_gpu_for_simulation" default="false"/><!-- use_gpu_for_simulation -->
  <!-- arm robot -->
  <arg name="launch_arm" default="false"/>
  <arg name="arm_manufacturer" default="franka"/>
  <arg name="arm_model" default="panda"/>
  <arg name="launch_moveit" default="false"/>
  <arg name="arm_prefix" default="$(arg prefix)arm"/>

  <!-- GPS default position of Robotnik at Fuente del Jarro-->
  <arg name="gps_latitude" default="39.5080331"/>
  <arg name="gps_longitude" default="-0.4619816"/>

  <group ns="$(arg id_robot)">

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro '$(arg xacro_robot_path)'
          prefix:=$(arg prefix)
          ros_planar_move_plugin:=$(arg ros_planar_move_plugin)
          omni_wheels:=$(arg omni_drive)
          gpu:=$(arg use_gpu_for_simulation)
          gps_latitude:='$(arg gps_latitude)'
          gps_longitude:='$(arg gps_longitude)'
          --inorder"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
      <remap from="/joint_states" to="joint_states" />
    </node>

    <!-- Spawner model into gazebo -->
    <node name="urdf_spawner_summit_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-x $(arg x_init_pose)
            -y $(arg y_init_pose)
            -z $(arg z_init_pose)
            -J robot_arm_joint1 0.0
            -J robot_arm_joint2 0.0
            -J robot_arm_joint3 0.0
            -J robot_arm_joint4 -1.57
            -J robot_arm_joint5 0.0
            -J robot_arm_joint6 1.57
            -J robot_arm_joint7 0.78
            -urdf
            -param robot_description
            -model $(arg id_robot)
            -unpause
            "/>

    <arg if="$(arg ros_planar_move_plugin)" name="base_controllers" default="joint_read_state_controller"/>
    <arg unless="$(arg ros_planar_move_plugin)" name="base_controllers" default="joint_read_state_controller 
                                                                                 robotnik_base_control"/>
    <rosparam file="$(find summit_xl_control)/config/robot_control.yaml" command="load"/>
    
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" 
          args="$(arg base_controllers)"/>

    <group if="$(arg launch_arm)">

      <arg name="arm_id" value="$(arg prefix)arm"/>
      <rosparam file="$(find rbkairos_darko_gazebo)/config/franka_hw_sim.yaml" subst_value="true" />
      <rosparam file="$(find rbkairos_darko_gazebo)/config/sim_controllers.yaml" subst_value="true" />
    
      <arg name="arm_controllers" default="franka_state_controller effort_joint_trajectory_controller"/>

      <node name="$(arg arm_prefix)_trajectory_controller" pkg="controller_manager" type="spawner" output="screen"
            args="$(arg arm_controllers)"/>
    </group>

    <!-- start summit_xl_pad nodes -->
    <include file="$(find robotnik_pad)/launch/robotnik_pad.launch">
      <arg name="pad_model" value="ps4"/>
    </include>

    <!-- base_hw_sim -->
    <include file="$(find robotnik_base_hw_sim)/launch/summit_xl_hw_sim.launch">
      <arg name="prefix" value="$(arg prefix)"/>
    </include>

    <!-- start dock_manager node -->
    <include file="$(find charge_manager)/launch/charge_manager.launch">
      <arg name="docker_mode" value="manual_sw"/>
      <arg name="inverted_contact_relay_input" value="false"/>
      <arg name="contact_relay_input_number" value="2"/>
      <arg name="charger_relay_output_number" value="1"/>
    </include>

    <!-- start battery_estimation node -->
    <include file="$(find battery_estimation)/launch/table_battery.launch">
      <arg name="battery_voltage" value="24"/>
      <arg name="read_voltage_from_analog_input" value="true"/>
      <arg name="voltage_analog_input_number" value="1" />
      <arg name="current_analog_input_number" value="2" />
    </include>

    <!-- imu_complementary_filter-->
    <node pkg="imu_complementary_filter" type="complementary_filter_node" name="complementary_filter_node" output="screen">
      <remap from="imu/mag" to="mavros/imu/mag"/>
      <param name="fixed_frame" value="$(arg prefix)imu_link"/>
      <param name="publish_tf" value="false"/>
      <param name="publish_debug_topics" value="true"/>
      <param name="do_bias_estimation" value="false"/>
      <param name="do_adaptive_gain" value="true"/>
      <param name="use_mag" value="false"/>
      <param name="gain_acc" value="0.005"/>
      <param name="gain_mag" value="0.001"/>
    </node>

    <!-- MoveGroup Moveit! -->
    <include if="$(arg launch_moveit)" file="$(find summit_xl_j2s7s300_moveit_config)/launch/summit_xl_j2s7s300_moveit_config.launch">
      <!--arg name="sim" value="true"/-->
    </include>

  </group>

</launch>
